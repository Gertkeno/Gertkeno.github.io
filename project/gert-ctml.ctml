[html
	[head
		[title Project Page: gert-ctml]
		[link{rel="stylesheet" type="text/css"}@gert-ctml.css ]
		[meta{charset="utf-8"}])
	]
	[body
		[h1 gert-ctml]
		[h2 Legend]
		[ul
			[li [a@#Simple A Simple Html Converter]]
			[li [a@#Quick-Attributes Quick Attributes]]
			[li [a@#Comments Comments]]
			[li [a@#This This Page &amp; Downloads]]
		]
		[h2#Simple A Simple Html Converter]
		[p My inspiration for this project was [a@http://haml.info/ HAML], I liked the automatic end tags and generally cleaner looking code.]
		[p Unfortunately all the ruby related features didn't appeal to me, and simply adding odd attributes was harder than just using HTML.]
		[p I just wanted to make static websites easier to code. So I started with redefining tags.]
		[p From [b &#60;p&#62;] to [b \[p] I figured it would make more sense to keep the brackets open if the tag is open. With simplicity and container syntax in mind all end tags went from [b &#60;/p&#62;] to a global [b \]].]
		[p There are some cases where you don't want to make an end tag, such as [b &#60;br&#62;] and [b &#60;hr&#62;]. For thos cases you just append [b \])], now with context: [b \[br\])]]
		[p As an example my first paragraph converts like so:]
		[div.code
	\[p My inspiration for this project was \[a@http://haml.info/ HAML\], I liked the automatic end tags and generally cleaner looking code.\]
		]
		[div.code
	&#60;p&#62;My inspiration for this project was &#60;a href="http://haml.info/"&#62;HAML&#60;/a&#62;, I liked the automatic end tags and generally cleaner looking code.&#60;/p&#62;
		]
		[p What happened with the [b \[a@...] tag though? I guess this requires a expertly crafted transitional question.]

		[br])
		[h2#Quick-Attributes Quick Attributes]
		[p With tags in place I needed a way to add attributes, starting with the obvious classes and ids I copied straight from HAML. If you added a dot or octothorpe it will append the specified class or id attribute.]
		[p Take the previous example as an example.]
		[div.code
	\[div.code
		\[p My inspiration for this project was \[a@http://haml.info/ HAML\], I liked the automatic end tags and generally cleaner looking code.\]
	\]
		]
		[div.code
	&#60;div class="code"&#62;
		&#60;p&#62;My inspiration for this project was &#60;a href="http://haml.info/"&#62;HAML&#60;/a&#62;, I liked the automatic end tags and generally cleaner looking code.&#60;/p&#62;
	&#60;/div&#62;
		]
		[p When the CSS staples were out of the way I went to actually test my mess of code [sup it's all one file save me].]
		[p I found that I couldn't add links, or image sources, the possibilities were stunted. As far as I know HAML didn't have a quick href/src solution so I had to make up my own.]
		[p Without straying far from the single special character syntax, I decided on [b @] and [b $] since @ makes me think of emails and that's kind of href related. $ looks like s, so $rc.]
		[p Initially this didn't work, as I used the same code from classes and ids which only parsed alphabetical characters]
		[p I'll dial back the recursion for this example, with this broken code the first paragraph's [b \[a@] tag would look like this]
		[div.code
	\[a@http://haml.info/ HAML\]
		]
		[div.code
	&#60;a href="http" class="info"&#62;HAML&#60;/a&#62;
		]
		[p Luckily this meant I could link to a local file named 'http' so it wasn't completely useless.]
		[p Besides adding more syntax I decided the best way to fix this was to make href and src notation parse until white space. A space was already required for the basic tags to work, the only difference now is the href or src attribute has to be at the end of tag declaration.]
		[p Class &plus; href doesn't come up a lot, and I'm pretty sure most people don't recommend classed anchor tags. That means I had to make my own example of how this syntax works.]
		[div.code
	\[img.pepsi-dog$http://i.imgur.com/BKCGCeK.jpg \])
		]
		[div.code
	&#60;img class="pepsi-dog" src="http://i.imgur.com/BKCGCeK.jpg"&#62;
		]
		[p Now I know what you've been thinking, probably from the start "All these attribute shortcuts are fantastic, but you can't seriously have one for every attribute! There are only 26 special characters left on my keyboard!"]
		[p You're right, and I don't, However I have included a way to add any attribute you want.]
		[div.code
	\[meta{charset="utf-8"}\])
		]
		[div.code
	&#60;meta charset="utf-8"&#62;
		]
		[p Anything inside the curly brackets is inserted plain text into the tag. You can still mix and match quick attributes with this so it doesn't hinder the system I strive to build.]
		[p That's probably more than enough about these five shortcuts and their interactions, so I'll move on to less useful, more back-end stuff.]

		[br])
		[h2#Comments Comments]
		[p Pretty basic stuff for this, I just check for a [b \*] and append the usual HTML comment syntax &#60;!-- and then the rest of the line --&#62;]
		[p I initially didn't include the comments in the final HTML file since HTML comments could be written directly. It's now a command line argument, if you want gert-ctml comments removed include -s when running]
		[p Sadly I don't care about multi-line comments in HTML, nor do I care about parsing comments so it's contents is in HTML.]
		[div.code
	\*\[p this is sample text, please ignore me\]
		]
		[div.code
	&#60;!--\[p this is sample text, please ignore me\]--&#62;
		]
		[p I do however, care about multiple comments on one line. Adding another [b \*] to a commented line will stop the comment, or start commenting again.]
		[div.code
	\*this\*is\*going\*to\*be\*a\*wild\*ride\*my\*dudes
		]
		[div.code
	&#60;!--this--&#62;is&#60;!--going--&#62;to&#60;!--be--&#62;a&#60;!--wild--&#62;ride&#60;!--my--&#62;dudes
		]
		[p This document, and it's examples couldn't be possible without HTML symbol entities. I still decided to include character escapes by \\]
		[p It's like most any character escape, ignores the first \\ and prints the second character.]
		[div.code
	\\\[p My inspiration for this project was \\\[a@http://haml.info/ HAML\\\], I liked the automatic end tags and generally cleaner looking code.\\\]
		]
		[div.code
	\[p My inspiration for this project was \[a@http://haml.info/ HAML\], I liked the automatic end tags and generally cleaner looking code.\]
		]
		[p This is kind of difficult to show off, but if you really want to look through character escapes check the links below.]

		[br])
		[h2#This This Page &amp; Downloads]
		[p If you want to see the gert-ctml code for this page [a@gert-ctml.ctml click here]]
		[p The git repo for this project is located [a@https://github.com/Gertkeno/gert-ctml on GitHub]]
	]
]
