<!DOCTYPE html>
[html
	[head
		[title Project Page: Notepad 3D]
		[link{rel="stylesheet" type="text/css"}@../project.css ])
		[meta{charset="utf-8"}])
	]
	[body
		[h1 Notepad 3D]
		[h2 Legend]
		[ul
			[li [a@#Preamble The Illegible Text Editor]]
			[li [a@#Making-of Making A Text Editor]]
			[li [a@#Meshes The Alphabet 3D]]
			[li [a@#Downloads Downloads &amp; Plans]]
		]
		[h2#Preamble The Illegible Text Editor]
		[p Let's just start this one with an example.]
		[iframe{width="560" height="315" src="https://www.youtube.com/embed/2uXGnX5MTKs?rel=0" frameborder="0" allowfullscreen}]
		[p You might ask for my motivation, and I do have half a good reason for doing this. There's a great streamer on twitch called [a@https://www.twitch.tv/kitboga Kitboga], they call tech support scammers and attempts to waste their time.]
		[p On good days the scammers will attempt to use some of windows pre-packaged programs to lock up Kitboga's computer.]
		[iframe{src="https://clips.twitch.tv/embed?clip=ClumsySpookyLardOMGScoots&autoplay=false&tt_medium=clips_embed" width="640" height="360" frameborder="0" scrolling="no" allowfullscreen="true"}]
		[p Now if you have a keen eye, good knowledge of how self destructive windows is, and watched the above clip you'll see the [a@https://en.wikipedia.org/wiki/Syskey#Malicious_use syskey] program was intentionally replaced with a gag program.]
		[p What I set out to do was create a [i "reasonable"] replacement for the notorious Windows text editor. Shortly into the project I found out his virtual machine doesn't support my favorite OpenGL 3.2]
		[p Pushing forward I decided it would still be a good test of compiling all my assets into the executable. Normally I'd use the [b xxd -i] command to convert the binary data of a file to a C compile-able form, but if all my 3D files are in [a@https://en.wikipedia.org/wiki/Wavefront_.obj_file#File_format Wavefront Obj] format I figure making a specialized program would help.]
		[p Thus my second gert prefixed project was born [a@https://github.com/Gertkeno/gert-wavefrontc gert-wavefrontc], this skipped the run-time file parsing part of loading a 3D mesh. Basics of how it works is Wavefront happens to already be a close to compilable data format, just replace [b v] with [b float vertex\[\]], [b vt] with [b float textureUV\[\]], etc. It's very close to simple character swaps.]
		[br])
		[h2#Making-of Making A Text Editor]
		[p Turns out making notepad isn't too hard to do in two days. I started out with a single [span.code std::string] for each document and just loaded them with data from command line argument specified files.]
		[p After loading files SDL2 makes it easy to append and remove text. The union SDL_Event allows for simple code like [span.code document += event.text.text] where [span.code document] is a std::string and [span.code event] is of type SDL_Event.]
		[p Absolute basics are covered: append text, delete text, all you literally [i need] right? However I wanted to make some odd function calls available on the keyboard, SDL2 once again coming to the rescue lets this long, expandable chain of if statements do what ever I'd like them to.]
		[div.code
	if( (SDL_GetModState() &amp; KMOD_LCTRL) != KMOD_LCTRL ) break;
	if( _event.key.keysym.sym == SDLK_p )
	{
		std::cerr << "\[Manager\] Reading from active document(" << ACTIVE_COUNT <<"):";
		std::cout << _docs\[_activeDoc\].get_file() << std::endl;
	}
	else if( _event.key.keysym.sym == SDLK_q )
	{
		living = false;
	}
	else if( _event.key.keysym.sym == SDLK_n )
	{
		make_document( nullptr );
	}
	else if( _event.key.keysym.sym == SDLK_w )
	{
		close_document();
	}
	else if( _event.key.keysym.sym == SDLK_j )
	{
		if( _activeDoc <= 0 )break;
		--_activeDoc;
		std::cerr << "\[Manager\] Down to document " << ACTIVE_COUNT << std::endl;
	}
	else if( _event.key.keysym.sym == SDLK_k )
	{
		if( _activeDoc >= _docs.size()-1 ) break;
		++_activeDoc;
		std::cerr << "\[Manager\] Up to document " << ACTIVE_COUNT << std::endl;
	}
		]
		[p The first if statement checks [span.code SDL_GetModState()], bitwise ANDs it with the left control key's mod code. If said key isn't held down it won't execute the code below, since it's all breakable from the switch statement above. If you want more context here's a link to this [a@https://bitbucket.org/Gertkeno/notepad3d/src/014215017445572e9f2f53b5d4b0d84dd40e86c9/src/Manager.cpp?at=master&fileviewer=file-view-default#Manager.cpp-56 line in the file src/Manager.cpp]]
		[p Majority of these special control hotkeys aren't useful, at least not for text editing. The Ctrl-P hotkey just prints the current document to cout, really helpful when I was debugging, at best you can pipe this to a file for writing. Ctrl-Q quits, very nice if you're using [a@https://i3wm.org/ i3-wm] don't have the X to close. Then there's the document management hotkeys, these would be useful if I added saving directly to file.]
		[p Now if I tried to add file saving I'd have to make some kind of temporary text to get a filename, which would only be difficult due to adding a "Document write" mode and a "Filename write" mode. I'd have to split my draw function, and text capture function into two parts.]
		[p Modal programming isn't always hard, this case wouldn't be either, but I know I'd try to make a more robust system than is needed for a intentionally bad project. I still had to make all the 3D models and render them, so I felt like focusing on getting that done.]
		[br])
		[h2#Meshes The Alphabet 3D]
		[table
			[tr
				[td [iframe{width="270" height="415" src="https://www.youtube.com/embed/64JDEpR1RyA?rel=0" frameborder="0" allowfullscreen}]]
				[td
					[p [sup Sorry for the Snapchat screencap.]]
					[p With the first letter of my alphabet done I tested it's rotational glory, by using A instead of any character typed.]
					[p I decided my character set would be minimally ambitious and set out to make models for A-Z and 0-9. Later I found that punctuation really ties a lot of writing together so I added special characters [span.code . - = ! $ ' , ? /]]
					[p If you want to use this barely complete 3D alphabet I'd recommend just downloading the repository as zip [a@https://bitbucket.org/Gertkeno/notepad3d/downloads/ here]. I include Wavefront and C compileable formats.]
				]
			]
		]
		[p Since I need more data to do 3D characters I switch from [span.code std::string] per document to a [span.code std::vector] of my custom class. The custom character class just needs variables to make it spin. Giving it two floats for animation timing and animation speed, and a vector axis to spin on.]
		[p Eventually I turned the background white to match classic notepad with the regular [span.code glClearColor()] and [span.code glClear()] functions.]
		[br])
		[h2#Downloads Downloads &amp; Plans]
		[p [a@https://bitbucket.org/Gertkeno/notepad3d/downloads/ Downloads hosted on BitBucket]]
		[p [s If you intend to actually use this to edit and save files wait for major release 1. More likely if you just want to view a file in the worst way possible go ahead and pick the highest release candidate, marked notepad3d_rc#.zip]]
		[p Major 1 is out, saving and opening files is here.]

		[p Intended features for major 1 are as follow]
		[ul
			[li &#10003; Opening files]
			[ul
				[li &#10003; As command line arguments]
				[li &#10003; In-app]
			]
			[li &#10003; Saving files in-app]
			[li &#10003; Text rotates]
			[li &#10003; Multiple document management]
		]
	]
]
